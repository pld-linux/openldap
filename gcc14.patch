--- build/openldap.m4.orig	2024-06-11 18:11:39.136234376 +0200
+++ build/openldap.m4	2024-06-11 18:16:17.264961945 +0200
@@ -378,7 +378,7 @@
 #ifndef NULL
 #define NULL ((void *)0)
 #endif
-main()
+int main()
 {
 #if DB_VERSION_MAJOR > 1
 	char *version;
@@ -427,7 +427,7 @@
 #ifndef NULL
 #define NULL ((void *)0)
 #endif
-main()
+int main()
 {
 	int rc;
 	u_int32_t flags = DB_CREATE |
@@ -596,6 +596,7 @@
 AC_DEFUN([OL_PTHREAD_TEST_INCLUDES], [[
 /* pthread test headers */
 #include <pthread.h>
+#include <unistd.h>
 #if HAVE_PTHREADS < 7
 #include <errno.h>
 #endif
@@ -785,7 +786,7 @@
 #include <sys/types.h>
 #include <regex.h>
 static char *pattern, *string;
-main()
+int main()
 {
 	int rc;
 	regex_t re;
@@ -812,7 +813,7 @@
 [AC_CACHE_CHECK([if toupper() requires islower()],ol_cv_c_upper_lower,[
 	AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <ctype.h>
-main()
+int main()
 {
 	if ('C' == toupper('C'))
 		exit(0);
@@ -867,7 +868,7 @@
 			]])],[ol_cv_nonposix_strerror_r=yes],[ol_cv_nonposix_strerror_r=no])
 	else
 		AC_RUN_IFELSE([AC_LANG_SOURCE([[
-			main() {
+			int main() {
 				char buf[100];
 				buf[0] = 0;
 				strerror_r( 1, buf, sizeof buf );
--- configure.in.orig	2024-06-11 18:19:43.515745310 +0200
+++ configure.in	2024-06-11 19:01:41.263778364 +0200
@@ -1466,10 +1466,8 @@
 				dnl save the flags
 				AC_LINK_IFELSE([AC_LANG_PROGRAM([[
 #include <pthread.h>
-#ifndef NULL
-#define NULL (void*)0
-#endif
-]], [[pthread_detach(NULL);]])],[ol_cv_func_pthread_detach=yes],[ol_cv_func_pthread_detach=no])
+pthread_t tid;
+]], [[pthread_detach(tid);]])],[ol_cv_func_pthread_detach=yes],[ol_cv_func_pthread_detach=no])
 			])
 
 			if test $ol_cv_func_pthread_detach = no ; then
--- libraries/libldap/tls2.c.orig	2021-06-03 20:40:31.000000000 +0200
+++ libraries/libldap/tls2.c	2024-06-11 19:32:22.899386215 +0200
@@ -315,6 +315,9 @@
 	return tls_imp->ti_session_upflags( sb, ssl, rc );
 }
 
+int
+ldap_pvt_tls_check_hostname( LDAP *ld, void *s, const char *name_in );
+
 /*
  * Call this to do a TLS connect on a sockbuf. ctx_arg can be
  * a SSL_CTX * or NULL, in which case the default ctx is used.
--- servers/slapd/bconfig.c.orig	2021-06-03 20:40:31.000000000 +0200
+++ servers/slapd/bconfig.c	2024-06-11 19:57:56.599820406 +0200
@@ -4493,7 +4493,7 @@
 	build_new_dn( &e->e_nname, &parent->ce_entry->e_nname, nnewrdn, NULL );
 
 	/* Replace attr */
-	rc = ldap_bv2rdn( &e->e_name, &rDN, &text, LDAP_DN_FORMAT_LDAP );
+	rc = ldap_bv2rdn( &e->e_name, &rDN, (char**)&text, LDAP_DN_FORMAT_LDAP );
 	if ( rc ) {
 		return rc;
 	}
@@ -6511,7 +6511,7 @@
 		attr_merge_normalize_one(e, slap_schema.si_ad_objectClass,
 			extra->co_name, NULL );
 
-	rc = ldap_bv2rdn( rdn, &rDN, &text, LDAP_DN_FORMAT_LDAP );
+	rc = ldap_bv2rdn( rdn, &rDN, (char**)&text, LDAP_DN_FORMAT_LDAP );
 	if ( rc ) {
 		goto fail;
 	}
--- servers/slapd/back-ldap/bind.c.orig	2024-06-11 20:21:22.088814143 +0200
+++ servers/slapd/back-ldap/bind.c	2024-06-11 20:21:29.615264209 +0200
@@ -659,6 +659,9 @@
 }
 #endif /* HAVE_TLS */
 
+void
+slap_client_keepalive(LDAP *ld, slap_keepalive *sk);
+
 static int
 ldap_back_prepare_conn( ldapconn_t *lc, Operation *op, SlapReply *rs, ldap_back_send_t sendok )
 {
--- servers/slapd/back-meta/conn.c.orig	2021-06-03 20:40:31.000000000 +0200
+++ servers/slapd/back-meta/conn.c	2024-06-11 20:23:17.468831054 +0200
@@ -227,6 +227,9 @@
  * End of debug stuff
  */
 
+void
+slap_client_keepalive(LDAP *ld, slap_keepalive *sk);
+
 /*
  * metaconn_alloc
  * 
--- servers/slapd/back-perl/init.c.orig	2024-06-11 19:03:49.770324239 +0200
+++ servers/slapd/back-perl/init.c	2024-06-11 20:43:59.509020588 +0200
@@ -23,7 +23,7 @@
 extern char **environ;
 #endif
 
-XSINIT_t perl_back_xs_init LDAP_P((PERL_BACK_XS_INIT_PARAMS));
+void perl_back_xs_init LDAP_P((PERL_BACK_XS_INIT_PARAMS));
 EXT void boot_DynaLoader LDAP_P((PERL_BACK_BOOT_DYNALOADER_PARAMS));
 
 PerlInterpreter *PERL_INTERPRETER = NULL;
@@ -159,7 +159,7 @@
 }
 
 
-XSINIT_t
+void
 perl_back_xs_init(PERL_BACK_XS_INIT_PARAMS)
 {
 	char *file = __FILE__;
--- contrib/slapd-modules/cloak/cloak.c.orig	2021-06-03 20:40:31.000000000 +0200
+++ contrib/slapd-modules/cloak/cloak.c	2024-06-11 21:09:45.246800806 +0200
@@ -176,6 +176,9 @@
 	return rc;
 }
 
+void
+attr_clean( Attribute *a );
+
 static int
 cloak_search_response_cb( Operation *op, SlapReply *rs )
 {
--- contrib/slapd-modules/smbk5pwd/smbk5pwd.c.orig	2024-06-11 23:10:06.234996195 +0200
+++ contrib/slapd-modules/smbk5pwd/smbk5pwd.c	2024-06-11 23:12:05.181693035 +0200
@@ -928,6 +928,17 @@
 	return rc;
 }
 
+kadm5_ret_t
+kadm5_s_init_with_password_ctx (
+	krb5_context /*context*/,
+	const char */*client_name*/,
+	const char */*password*/,
+	const char */*service_name*/,
+	kadm5_config_params */*realm_params*/,
+	unsigned long /*struct_version*/,
+	unsigned long /*api_version*/,
+	void **/*server_handle*/);
+
 static int
 smbk5pwd_modules_init( smbk5pwd_t *pi )
 {
--- servers/slapd/config.c.orig	2021-06-03 20:40:31.000000000 +0200
+++ servers/slapd/config.c	2024-06-13 00:03:34.605728087 +0200
@@ -133,7 +133,7 @@
 	int rc, arg_user, arg_type, arg_syn, iarg;
 	unsigned uiarg;
 	long larg;
-	size_t ularg;
+	unsigned long ularg;
 	ber_len_t barg;
 	
 	if(Conf->arg_type == ARG_IGNORED) {
