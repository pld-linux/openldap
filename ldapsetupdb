#!/usr/bin/perl

#######################################
# Some functions

$classes{'c'} = 'country';
$classes{'cn'} = 'container';
$classes{'dc'} = 'domain';
$classes{'l'} = 'locality';
$classes{'o'} = 'organization';
$classes{'ou'} = 'organizationalUnit';

sub guess_ldiff{
my ($dn,$more)=@_;
my ($ldiff);

  print "\$dn=\"$dn\"\n";
  $dn=~/^(\w+)=(\w+)/;
  $field=$1;
  $value=$2;

  $more="" unless defined($more);

  print "\$field=\"$field\"\n";
  $class=$classes{$field} if defined($classes{$field});
  print "\$class=\"$class\"\n";

  $ldiff=<<EOF;
$dn
objectClass=top
objectClass=$class
EOF
  $ldiff.=$more;
  $ldiff.=<<EOF;
$field=$value

EOF

  return $ldiff;
}

sub make_path{
my ($dn,$skip)=$@;
my ($dn1,$ldiff,@dn_frag,$i);

  $skip=0 unless defined($skip);
  
  $dn1=$dn;
  $dn1=~s/\Q$BASEDN\E$//;

  @dn_frag=split /\s*,\s*/,$dn1;
  for($i=$#dn_frag; $i >= $skip; $i--){
        $ldiff=$ldiff . guess_ldiff(join(",",@dn_frag[$i,]));
  }
  return $ldiff;
}

sub add_entries{
my ($ldiff)=@_;

  return if !defined($ldiff) or $ldiff eq "";

  open LDAPADD,"|ldapadd -D\"$ROOTDN\" -w\"$ROOTPW\" -c > /dev/null" or die "Couldn't start ldapadd\n";
  print LDAPADD $ldiff;
  close LDAPADD;
};

sub do_crypt{
my ($pw)=@_;
my ($salt);
  
  $salt=join '', ('.', '/', 0..9, 'A'..'Z','a'..'z')[rand 64, rand 64];
  return crypt($pw,$salt);
}

sub root_ldiff{
my ($ldiff,$rootdn,$crypted);
 
  $ldiff=make_path($ROOTDN,1);
  $ROOTDN=~/cn=([^,]*),/;
  $rootcn=$1;

  $crypted=do_crypt($ROOTPW);

  $ldiff.=<<EOF;
$ROOTDN
objectClass=top
objectClass=simpleSecurityObject
objectClass=organizationalRole
cn=$rootcn
userPassword={crypt}$crypted

EOF
  return $ldiff;
};

sub sys_ldiff{
my ($ldiff,$syscn,$crypted);
 
  $ldiff=make_path($ROOTDN,1);
  $SYSDN=~/cn=([^,]*),/;
  $syscn=$1;

  $crypted=do_crypt($SYSPW);
  
  $ldiff.=<<EOF;
$SYSDN
objectClass=top
objectClass=simpleSecurityObject
objectClass=organizationalRole
cn=$syscn
userPassword={crypt}$crypted

EOF
  return $ldiff;
};

sub write_slapd_conf{
my $crypted;

  $crypted=do_crypt($ROOTPW);
  system "cp -f /etc/openldap/slapd.conf /etc/openldap/slapd.conf.bak";
  open FILE,">>/etc/openldap/slapd.conf";
  print FILE <<EOF;

########################################
# Configuration generated by ldapsetupdb
database ldbm
suffix		"$BASEDN"
directory	"$DIRECTORY"
rootdn		"$ROOTDN"
rootpw		{crypt}$crypted
########################################
EOF
  close FILE;

}

sub write_secret{

  system "mv -f /etc/openldap/secret /etc/openldap/secret.bak";
  open FILE,">/etc/openldap/secret";
  print FILE <<EOF;
$SYSTEMDN
$SYSTEMPW
EOF
  close FILE;
}

sub write_access_conf{
  
  system "cp -f /etc/openldap/slapd.access.conf /etc/openldap/slapd.access.conf.bak";
  open FILE,">>/etc/openldap/slapd.access.conf";
  print FILE <<EOF;

############################
# ACLs generated by ldapsetupdb

#access to filter="uidNumber<=99"
#	by * none
	
access to dn="$ROOTDN" attrs=userPassword
	by * none

access to dn="$SYSDN" attrs=userPassword
	by self write
	by * none

access to dn="uid=.*,ou=People,$MIGRATEDN" attrs=userPassword
	by self write
	by dn="$SYSDN" write
	by * none

access to dn="uid=.*,ou=People,$MIGRATEDN"
		attrs=shadowlastchange,shadowmax,shadowwarning
	by dn="$SYSDN" write
	by * none

access to dn="cn=.*,ou=Group,$MIGRATEDN" attrs=userPassword
        by * none

access to dn="ou=Group,$MIGRATEDN"
        by addr="127.0.0.1" read
        by * none
############################
EOF
  close FILE;
}

sub update_ldap_conf{

  system "mv -f /etc/ldap.conf /etc/ldap.conf.bak";
  open INPUT,"</etc/ldap.conf.bak";
  open OUTPUT,">/etc/ldap.conf";
  while(<INPUT>){
        if (/^host\s+/) { print OUTPUT "#$_"."host 127.0.0.1"; }
        elsif (/^base\s+/) { print OUTPUT "#$_"."base $BASEDN"; }
	else { print OUTPUT $_; }
  }
  close OUTPUT; 
  close INPUT;
}

sub get_domain{
my ($hostname,$domain);

  $hostname=`hostname`;
  chop $hostname;
  
  open FILE,"/etc/resolv.conf";
  while(<FILE>){
  	next unless /^domain (\S*)$/;
	$domain=$1;
	last;
  }
  $hostname.=".$domain" if defined($domain);
  
  print "hostname: $hostname\n";
 
  $DOMAIN=$hostname;
  $DOMAIN=~s/[^\.]*\.(.*)/$1/;
  print "domain: $DOMAIN\n";
}

sub migrate{
my ($what,$file,$yes)=@_;

   $yes=1 unless defined($yes);
   $yes=0 unless -f $file;
   
   print "Migrate $what";
   if ($yes) {
     print "[Y/n]? ";
     $_=<STDIN>;
     $yes=0 if /^[nN]/;
   }
   else{
     print "[y/N]? ";
     $_=<STDIN>;
     $yes=1 if /^[yY]/;
   }
   
   return `./migrate_$what.pl $file` if $yes;
   return "";
}

############################################################
#  Main program

my ($ldiff,$tmpdir);

print <<EOF;
  This script will prepare LDAP database creating and modyfying
  apopriate config files. Optionally it will migrate your sytem 
  files like passwd, grop etc. into the database.
  It works only with local ldap server.
  
EOF

print "Do you want to continue [Y/n]? ";
$_=<STDIN>;

exit if /^[nN]/;

get_domain();       

$BASEDN=$DOMAIN;
$BASEDN=~s/\./,dc=/g;
$BASEDN="dc=$BASEDN";
print "Base DN for your database [$BASEDN]? ";
$_=<STDIN>; chop;

$BASEDN=$_ if $_;

$DIRECTORY="/var/lib/openldap";
print "Directory for your database [$DIRECTORY]? ";
$_=<STDIN>; chop;
$DIRECTORY=$_ if $_;

if (-e "$DIRECTORY/id2entry.dbb") {

  print "There already is a database in directory $DIRECTORY\n";
  print "Continue? I will make backup. [y/N]";
  $_=<STDIN>;
  exit unless /^[yY]/;
  $movedir=1;
  system("mv $DIRECTORY $DIRECTORY.bak") == 0 or die "Couldn't move directory";
}

while(1) {
  $ROOTDN="cn=Manager, $BASEDN";
  print "Root DN for your database [$ROOTDN]? ";
  $_=<STDIN>; chop;
  $ROOTDN=$_ if $_ ne "";
  last if substr($ROOTDN,-length($BASEDN)) eq $BASEDN; 
  last unless $ROOTDN=~/^cn=/;
  print "Not in \"$BASEDN\", or not cn\n";
}

system "stty -echo";
while(1){
  print "Root password for your database: ";
  $ROOTPW=<STDIN>; chop $ROOTPW;
  print "\n";
  next if $ROOTPW eq "";
  print "Root password for your database (again): ";
  $_=<STDIN>; chop;
  print "\n";
  last if $_ eq $ROOTPW;
  print "Do not match!\n";
};  

system "stty echo";

while(1) {
  $SYSDN="cn=System, $BASEDN";
  print "System DN for your database [$SYSDN]? ";
  $_=<STDIN>; chop;
  $SYSDN=$_ if $_ ne "";
  last if substr($SYSDN,-length($BASEDN)) eq $BASEDN; 
  last unless $SYSDN=~/^cn=/;
  print "Not in \"$BASEDN\", or not cn\n";
}


# Generate system password
@pwchars=('.', '/', 0..9, 'A'..'Z','a'..'z');
my $i;
$SYSPW="";
for($i=0;$i<8;$i++){
    $SYSPW .= $pwchars[rand 64];
}

print <<EOF;
  System password is a password which root applications 
  use for binding to LDAP server. You don't have to change it.
  
EOF

system "stty -echo";
while(1){
  print "System password for your database [$SYSPW]?";
  $_=<STDIN>; chop;
  print "\n";
  last if $_ eq ""; 
  
  $SYSPW=<STDIN>;
  print "System password for your database (again): ";
  $_=<STDIN>; chop;
  print "\n";
  last if $_ eq $SYSPW;
  print "Do not match!\n";
};  
system "stty echo";

$migrate=0;
print "Do you want to migrate your passwd, group, etc. files [Y/n]? ";
$_=<STDIN>;
unless ( /^[nN]/){
  $migrate=1;
  while(1) {
    $MIGRATEDN=$BASEDN;
    print "Base DN for migrated data [$MIGRATEDN]? ";
    $_=<STDIN>; chop;
    $MIGRATEDN=$_ if $_ ne "";
    last if substr($MIGRATEDN,-length($BASEDN)) eq $BASEDN; 
    last unless $MIGRATEDN=~/^cn=/;
    print "Not in \"$BASEDN\"\n";
  }

  $MAILDOMAIN=$DOMAIN;
  print "Default mail domain [$MAILDOMAIN]? ";
  $_=<STDIN>; chop;
  $MAILDOMAIN=$_ if $_ ne "";

  $EXTSCHEMA=1;
  print "Should I use extended schema [Y/n]? ";
  $_=<STDIN>;
  $EXTCHEMA=0 if /^[nN]/;
}

################################################33
# Do your work

print "Basedn: $BASEDN\n";
print "Directory: $DIRECTORY\n";
print "Rootdn: $ROOTDN\n";
$ROOTPW1=$ROOTPW;
$ROOTPW1=~s/./*/g;
print "Rootpw: $ROOTPW1\n";
print "\nI am going to reconfigure and restart your slapd\n"; 
print "OK [Y/n]? ";
$_=<STDIN>;
exit if /^[nN]/;

if ($movedir == 1 ){
  system "mv $DIRECTORY $DIRECTORY.bak" or die "Couldn't move directory";
}
system "mkdir -p $DIRECTORY";
write_slapd_conf();
write_access_conf();
system "/etc/rc.d/init.d/ldap restart";
add_entries(guess_ldiff($BASEDN));
print "Adding manager account entry...\n";
add_entries(root_ldiff());
print "Adding system account entry...\n";
add_entries(sys_ldiff());
print "Creating secret file...\n";
write_secret();

if ($migrate){
  chdir '/usr/share/openldap/migration' or die "Couldn't change to /usr/share/openldap/migrate";

  $ENV{'LDAP_BASEDN'}=$MIGRATEDN;
  $ENV{'LDAP_DEFAULT_MAIL_DOMAIN'}=$MAILDOMAIN;
  $ENV{'LDAP_BIND_DN'}=$SYSDN;
  $ENV{'LDAP_EXTENDED_SCHEMA'}=$EXTSCHEMA;

  $ldiff = `./migrate_base.pl -n`;
  $ldiff .= migrate("aliases","/etc/aliases");
  $ldiff .= migrate("fstab","/etc/fstab");
  $ldiff .= migrate("group","/etc/group");
  $ldiff .= migrate("hosts","/etc/hosts");
  $ldiff .= migrate("networks","/etc/networks");
  $ldiff .= migrate("passwd","/etc/passwd");
  $ldiff .= migrate("protocols","/etc/protocols");
  $ldiff .= migrate("rpc","/etc/rpc");
  $ldiff .= migrate("services","/etc/services");
  $ldiff .= migrate("netgroup","/etc/netgroup",0);
  $ldiff .= migrate("netgroup_byuser","/etc/netgroup",0);
  $ldiff .= migrate("netgroup_byhost","/etc/netgroup",0);

  print "Updating database, it will take a moment...\n";
  add_entries($ldiff);
}

print "\nShould I update /etc/ldap.conf [Y/n]? "; 
$_=<STDIN>;
exit if /^[nN]/;

update_ldap_conf();

